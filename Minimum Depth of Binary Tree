Minimum Depth of Binary Tree

Problem Link - https://leetcode.com/explore/challenge/card/october-leetcoding-challenge/562/week-4-october-22nd-october-28th/3504/


Given a binary tree, find its minimum depth.
The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.
Note: A leaf is a node with no children.


 /**
     * Definition for a binary tree node.
     * public class TreeNode {
     * int val;
     * TreeNode left;
     * TreeNode right;
     * TreeNode() {}
     * TreeNode(int val) { this.val = val; }
     * TreeNode(int val, TreeNode left, TreeNode right) {
     * this.val = val;
     * this.left = left;
     * this.right = right;
     * }
     * }
     */

// queue will store object having node and depth as fields
    class qData {
        TreeNode node;
        int depth;

        public qData(TreeNode node, int depth) {
            this.node = node;
            this.depth = depth;
        }
    }

    class Solution {
        public int minDepth(TreeNode root) {
        //corner case
            if (root == null)
                return 0;
            Queue<qData> q = new LinkedList<>();
            qData qd = new qData(root, 1);
            q.add(qd);

         // Level order traversal
            while (!q.isEmpty()) {

               //remove fromt element of queue
                qd = q.remove();
                //getting details of removed element
                TreeNode node = qd.node;
                int depth = qd.depth;
                
                // If this is the first leaf node seen so far  then return depth
              if (node.left == null && node.right == null) {

                    return depth;
                }
                // If left subtree is not null then add it to queue  
            
                if (node.left != null) {

                    TreeNode newNode = node.left;
                    int newdepth = depth + 1;
                    qData newQData = new qData(newNode, newdepth);
                    q.add(newQData);
                }

                 // If right subtree is not null then add it to queue  
                if (node.right != null) {

                    TreeNode newNode = node.right;
                    int newdepth = depth + 1;
                    qData newQData = new qData(newNode, newdepth);
                    q.add(newQData);
                }
            }
            return 0;

        }
    }

